// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// winsvd
Rcpp::List winsvd(SEXP mat, int k, int p, int s, int rand, int batchs, Rcpp::List params_pca);
RcppExport SEXP _pcaone_winsvd(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP, SEXP batchsSEXP, SEXP params_pcaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type batchs(batchsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type params_pca(params_pcaSEXP);
    rcpp_result_gen = Rcpp::wrap(winsvd(mat, k, p, s, rand, batchs, params_pca));
    return rcpp_result_gen;
END_RCPP
}
// winsvd_sparse_col
Rcpp::List winsvd_sparse_col(SEXP mat, int k, int p, int s, int rand, int batchs);
RcppExport SEXP _pcaone_winsvd_sparse_col(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP, SEXP batchsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type batchs(batchsSEXP);
    rcpp_result_gen = Rcpp::wrap(winsvd_sparse_col(mat, k, p, s, rand, batchs));
    return rcpp_result_gen;
END_RCPP
}
// winsvd_sparse_row
Rcpp::List winsvd_sparse_row(SEXP mat, int k, int p, int s, int rand, int batchs);
RcppExport SEXP _pcaone_winsvd_sparse_row(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP, SEXP batchsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type batchs(batchsSEXP);
    rcpp_result_gen = Rcpp::wrap(winsvd_sparse_row(mat, k, p, s, rand, batchs));
    return rcpp_result_gen;
END_RCPP
}
// ssvd
Rcpp::List ssvd(SEXP mat, int k, int p, int s, int rand, Rcpp::List params_pca);
RcppExport SEXP _pcaone_ssvd(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP, SEXP params_pcaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type params_pca(params_pcaSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvd(mat, k, p, s, rand, params_pca));
    return rcpp_result_gen;
END_RCPP
}
// ssvd_sparse_col
Rcpp::List ssvd_sparse_col(SEXP mat, int k, int p, int s, int rand);
RcppExport SEXP _pcaone_ssvd_sparse_col(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvd_sparse_col(mat, k, p, s, rand));
    return rcpp_result_gen;
END_RCPP
}
// ssvd_sparse_row
Rcpp::List ssvd_sparse_row(SEXP mat, int k, int p, int s, int rand);
RcppExport SEXP _pcaone_ssvd_sparse_row(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    rcpp_result_gen = Rcpp::wrap(ssvd_sparse_row(mat, k, p, s, rand));
    return rcpp_result_gen;
END_RCPP
}
// dashsvd
Rcpp::List dashsvd(SEXP mat, int k, int p, int s, int rand, Rcpp::List params_pca);
RcppExport SEXP _pcaone_dashsvd(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP, SEXP params_pcaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type params_pca(params_pcaSEXP);
    rcpp_result_gen = Rcpp::wrap(dashsvd(mat, k, p, s, rand, params_pca));
    return rcpp_result_gen;
END_RCPP
}
// dashsvd_sparse_col
Rcpp::List dashsvd_sparse_col(SEXP mat, int k, int p, int s, int rand);
RcppExport SEXP _pcaone_dashsvd_sparse_col(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    rcpp_result_gen = Rcpp::wrap(dashsvd_sparse_col(mat, k, p, s, rand));
    return rcpp_result_gen;
END_RCPP
}
// dashsvd_sparse_row
Rcpp::List dashsvd_sparse_row(SEXP mat, int k, int p, int s, int rand);
RcppExport SEXP _pcaone_dashsvd_sparse_row(SEXP matSEXP, SEXP kSEXP, SEXP pSEXP, SEXP sSEXP, SEXP randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type rand(randSEXP);
    rcpp_result_gen = Rcpp::wrap(dashsvd_sparse_row(mat, k, p, s, rand));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pcaone_winsvd", (DL_FUNC) &_pcaone_winsvd, 7},
    {"_pcaone_winsvd_sparse_col", (DL_FUNC) &_pcaone_winsvd_sparse_col, 6},
    {"_pcaone_winsvd_sparse_row", (DL_FUNC) &_pcaone_winsvd_sparse_row, 6},
    {"_pcaone_ssvd", (DL_FUNC) &_pcaone_ssvd, 6},
    {"_pcaone_ssvd_sparse_col", (DL_FUNC) &_pcaone_ssvd_sparse_col, 5},
    {"_pcaone_ssvd_sparse_row", (DL_FUNC) &_pcaone_ssvd_sparse_row, 5},
    {"_pcaone_dashsvd", (DL_FUNC) &_pcaone_dashsvd, 6},
    {"_pcaone_dashsvd_sparse_col", (DL_FUNC) &_pcaone_dashsvd_sparse_col, 5},
    {"_pcaone_dashsvd_sparse_row", (DL_FUNC) &_pcaone_dashsvd_sparse_row, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_pcaone(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
